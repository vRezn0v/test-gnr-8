{"version":3,"sources":["utils/enums.js","screens/TestGenerator/Components/AddTestCase.js","screens/TestGenerator/Components/InputPane.js","screens/TestGenerator/Components/OutputPane.js","screens/TestGenerator/index.js","App.js","index.js"],"names":["ASSERTION_TYPES","name","value","assertionTypeEnum","eq","ne","gt","gte","lt","lte","deep","typeToFunctionEnum","AddTestCase","state","input","expectation","type","onChange","event","setState","target","render","className","placeholder","_","map","entry","onClick","props","closeModal","addTestCase","Component","InputPane","renderCaseCard","get","find","data","inputHandler","generateTests","showCaseModal","caseList","values","functionName","description","defaultReturn","OutputPane","generatedCases","componentDidMount","onChangeHandler","e","copyToClipboard","navigator","clipboard","writeText","toast","TestGenerator","showAddCaseModal","modalKey","outputKey","preGenValidator","split","length","functionDescription","result","generateSingleTestCase","generateRandomKey","payload","testCase","Math","random","toString","replace","renderCasesModal","visible","width","height","onClickAway","rel","href","App","position","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9ca97816.chunk.js","sourcesContent":["export const ASSERTION_TYPES = [{\r\n  name: \"Equal to\",\r\n  value: \"eq\"\r\n}, {\r\n  name: \"Not equal to\",\r\n  value: \"ne\"\r\n}, {\r\n  name: \"Greater than\",\r\n  value: \"gt\"\r\n}, {\r\n  name: \"Greater than / Equal to\",\r\n  value: \"gte\"\r\n}, {\r\n  name: \"Lesser than\",\r\n  value: \"gt\"\r\n}, {\r\n  name: \"Lesser than / Equal to\",\r\n  value: \"gte\"\r\n}, {\r\n  name: \"Deep Equal\",\r\n  value: \"deep\"\r\n},\r\n  // {\r\n  //   name: \"Array (contains)\",\r\n  //   value: \"contains\"\r\n  // }, {\r\n  //   name: \"String (includes)\",\r\n  //   value: \"includes\"\r\n  // }, {\r\n  //   name: \"Object (hasKey)\",\r\n  //   value: \"hasKey\"\r\n  // }]\r\n]\r\n\r\nexport const assertionTypeEnum = {\r\n  eq: \"should return\",\r\n  ne: \"should not return\",\r\n  gt: \"should return a value greater than\",\r\n  gte: \"should return a value greater than or equal to\",\r\n  lt: \"should return a value lower than\",\r\n  lte: \"should return a value lower than or equal to\",\r\n  // contains: \"should contain a value\",\r\n  // includes: \"should include a substring\",\r\n  // hasKey: \"should have a key named\",\r\n  deep: \"should return a deep equal of\"\r\n}\r\n\r\nexport const typeToFunctionEnum = {\r\n  eq: \"equal\",\r\n  ne: \"notEqual\",\r\n  gt: \"isAbove\",\r\n  gte: \"isAtLeast\",\r\n  lt: \"isBelow\",\r\n  lte: \"isAtMost\",\r\n  //contains: \"should contain a value\",\r\n  //includes: \"should include a substring\",\r\n  //hasKey: \"should have a key named\",\r\n  deep: \"deepEqual\"\r\n}","import _ from \"lodash\";\r\nimport React, { Component } from \"react\";\r\nimport { ASSERTION_TYPES } from \"../../../utils/enums\";\r\n\r\nexport default class AddTestCase extends Component {\r\n  state = {\r\n    input: \"\",\r\n    expectation: \"\",\r\n    type: \"eq\"\r\n  }\r\n\r\n  onChange = (event) => this.setState({ [event.target.name]: event.target.value })\r\n\r\n  render = () => {\r\n    return <div className=\"addCaseModal\">\r\n      <div className=\"addCaseModalHeader\">\r\n        <h3 className=\"modalHeading\">Add Test Case</h3>\r\n      </div>\r\n      <div className=\"addCaseModalBody\">\r\n        <input name=\"input\"\r\n          className=\"textInput\"\r\n          placeholder=\"Input\"\r\n          onChange={this.onChange} />\r\n        <select\r\n          name=\"type\"\r\n          className=\"textInput\"\r\n          onChange={this.onChange}>\r\n          {_.map(ASSERTION_TYPES, entry => (\r\n            <option value={entry.value}>\r\n              {entry.name}\r\n            </option>)\r\n          )}\r\n        </select>\r\n        <input\r\n          name=\"expectation\"\r\n          className=\"textInput\"\r\n          placeholder=\"Expected Output\"\r\n          onChange={this.onChange} />\r\n      </div>\r\n      <div className=\"addCaseModalFooter\">\r\n        <button\r\n          className=\"cancelButton\"\r\n          onClick={this.props.closeModal}\r\n        >Cancel</button>\r\n        <button\r\n          className=\"addCaseButton\"\r\n          onClick={() => this.props.addTestCase(this.state)}>\r\n          Add Test Case\r\n        </button>\r\n      </div>\r\n    </div>\r\n  }\r\n}","import _ from \"lodash\";\r\nimport React, { Component } from \"react\";\r\nimport { ASSERTION_TYPES } from \"../../../utils/enums\";\r\n\r\nexport default class InputPane extends Component {\r\n\r\n  renderCaseCard = entry => (\r\n    <div className=\"caseInfoCard\">\r\n      <div className=\"cardRow\">\r\n        <span className=\"cardRowLabel\">Input:</span>\r\n        <span className=\"cardRowValue\">{entry.input}</span>\r\n      </div>\r\n      <div className=\"cardRow\">\r\n        <span className=\"cardRowLabel\">Assertion:</span>\r\n        <span className=\"cardRowValue\">{_.get(_.find(ASSERTION_TYPES, data => data.value === entry.type), \"name\")}</span>\r\n      </div>\r\n      <div className=\"cardRow\">\r\n        <span className=\"cardRowLabel\">Expected Output:</span>\r\n        <span className=\"cardRowValue\">{entry.expectation}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n  render = () => {\r\n    const { inputHandler, generateTests, showCaseModal, caseList = [], values = {} } = this.props;\r\n\r\n    const { functionName, description, defaultReturn } = values;\r\n\r\n    return (<div className=\"generatorInputPane\">\r\n      <div className=\"inputPaneHeader\">\r\n        <input name=\"functionName\" value={functionName} className=\"textInput\" placeholder=\"Method Name\" onChange={inputHandler} />\r\n        <input name=\"description\" value={description} className=\"textInput grow\" placeholder=\"Description (optional)\" onChange={inputHandler} />\r\n        <input name=\"defaultReturn\" value={defaultReturn} className=\"textInput\" placeholder=\"Default Output (optional)\" onChange={inputHandler} />\r\n      </div>\r\n      <button className=\"addCaseButton\" onClick={() => showCaseModal()}>Add Case</button>\r\n      <div className=\"inputPaneBody\">\r\n        {_.map(caseList.map((entry = {}) => (this.renderCaseCard(entry))))}\r\n      </div>\r\n      <button className=\"generateTrigger\" onClick={generateTests}>\r\n        Generate Tests\r\n      </button>\r\n    </div>)\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nexport default class OutputPane extends Component {\r\n  state = {\r\n    generatedCases: \"\"\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { generatedCases = \"\" } = this.props;\r\n\r\n    this.setState({ generatedCases })\r\n  }\r\n\r\n  onChangeHandler = e => {\r\n    this.setState({ generatedCases: e.target.value })\r\n  }\r\n\r\n  copyToClipboard = () => {\r\n    const { generatedCases } = this.state;\r\n    navigator.clipboard.writeText(generatedCases);\r\n    toast(\"Test Cases Copied to Clipboard\");\r\n  }\r\n\r\n  render = () => {\r\n    const { generatedCases } = this.state;\r\n\r\n    return (<div className=\"generatorOutputPane\">\r\n      <div className=\"outputPaneHeader\">\r\n        <button className=\"copyCases\" onClick={this.copyToClipboard}>Copy</button>\r\n      </div>\r\n\r\n      <textarea className=\"outputPaneBody\" value={generatedCases} onChange={this.onChangeHandler}>\r\n        \r\n      </textarea>\r\n    </div>)\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport Modal from 'react-awesome-modal';\r\nimport toast from \"react-hot-toast\";\r\nimport { assertionTypeEnum, typeToFunctionEnum } from \"../../utils/enums\";\r\nimport AddTestCase from \"./Components/AddTestCase\";\r\n\r\nimport InputPane from \"./Components/InputPane\";\r\nimport OutputPane from \"./Components/OutputPane\";\r\nimport './index.css';\r\n\r\nexport default class TestGenerator extends Component {\r\n  state = {\r\n    functionName: \"\",\r\n    description: \"\",\r\n    defaultReturn: \"\",\r\n    caseList: [],\r\n    generatedCases: \"\",\r\n    showAddCaseModal: false,\r\n    modalKey: \"addCase\",\r\n    outputKey: \"output\"\r\n  }\r\n\r\n  preGenValidator = () => {\r\n    const { functionName, caseList } = this.state;\r\n\r\n    if (!functionName) {\r\n      toast(\"Please provide a function name.\")\r\n      return false;\r\n    }\r\n\r\n    if (functionName.split(\" \").length > 1) {\r\n      toast(\"Function name can not include spaces.\");\r\n      return false;\r\n    }\r\n\r\n    if (caseList.length === 0) {\r\n      toast(\"Please add at least one test case.\")\r\n      return false;\r\n    }\r\n\r\n    return true; \r\n  }\r\n\r\n  generateTests = () => {\r\n    if (!this.preGenValidator()) return;\r\n\r\n    const { functionName, description, caseList } = this.state;\r\n\r\n    const functionDescription = description ? `- ${description}` : ``;\r\n\r\n    let result = `describe(\"${functionName} ${functionDescription}\", () => {\\n`\r\n    \r\n    for (let entry of caseList) {\r\n      const { input, expectation, type } = entry;\r\n      result += this.generateSingleTestCase(functionName, input, expectation, type);\r\n    }\r\n\r\n    result += `});`\r\n\r\n    this.setState({ generatedCases: result, outputKey: this.generateRandomKey() });\r\n  }\r\n\r\n  generateSingleTestCase = (functionName, input, expectation, type) => {\r\n    return `\\tit(\"${assertionTypeEnum[type]} [${expectation}] for [${input}] as input.\", () => {\r\n    \\t\\tassert.${typeToFunctionEnum[type]}(${functionName}(${input}), ${expectation});\r\n    });\\n`;\r\n  }\r\n\r\n  addTestCase = (payload) => {\r\n    const { caseList = [], defaultReturn } = this.state;\r\n\r\n    let testCase = {...payload};\r\n    \r\n    if (!payload.input) return toast(\"Please provide an Input value.\");\r\n\r\n    if (!testCase.expectation && defaultReturn) testCase.expectation = defaultReturn;\r\n\r\n\r\n    this.setState({ caseList: [...caseList, testCase] }, () => {\r\n      this.closeModal();\r\n      toast(\"Test Case Added Successfully\");\r\n    });\r\n  }\r\n\r\n  showCaseModal = () => this.setState({ showAddCaseModal: true });\r\n\r\n  generateRandomKey = () => (Math.random().toString(36).replace(/[^a-z]+/g, ''));\r\n\r\n  closeModal = () => {\r\n    this.setState({ showAddCaseModal: false, modalKey: this.generateRandomKey() });\r\n  }\r\n\r\n  renderCasesModal = () => (<Modal\r\n      visible={this.state.showAddCaseModal}\r\n      width={\"50%\"}\r\n      height={\"25%\"}\r\n      onClickAway={this.closeModal}>\r\n    <AddTestCase key={this.state.modalKey} addTestCase={this.addTestCase} closeModal={this.closeModal} />\r\n  </Modal>)\r\n\r\n  inputHandler = (e) => this.setState({ [e.target.name]: e.target.value });\r\n\r\n  render = () => {\r\n    const { outputKey, caseList, functionName, description, defaultReturn, generatedCases } = this.state;\r\n    // input | output\r\n    return (<div className=\"testGeneratorView\">\r\n      <h1>Unit Test Generator</h1>\r\n      {this.renderCasesModal()}\r\n      <div className=\"testGeneratorBody\">\r\n        <div className=\"generatorDescription\">\r\n          Hello there :)<br/>\r\n          This is a Simple Unit Test Generating Utility.<br />\r\n          You can contribute to the development anytime here [ <a rel=\"noreferrer\" className=\"sourceLink\" target=\"_blank\" href=\"https://github.com/vRezn0v/test-gnr-8\">Github</a> ]\r\n        </div>\r\n        <div className=\"generatorWorkspace\">\r\n            <InputPane\r\n              showCaseModal={this.showCaseModal}\r\n              inputHandler={this.inputHandler}\r\n              caseList={caseList}\r\n              generateTests={this.generateTests}\r\n              values={{\r\n                functionName, description, defaultReturn\r\n              }} />\r\n            {generatedCases && <OutputPane key={outputKey} generatedCases={generatedCases} />}\r\n        </div>\r\n      </div>\r\n    </div>)\r\n  }\r\n}","import { Toaster } from 'react-hot-toast';\nimport './App.css';\nimport TestGenerator from './screens/TestGenerator';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Toaster position=\"bottom-center\" />\n      <TestGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}